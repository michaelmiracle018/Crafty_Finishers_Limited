/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from "@tanstack/react-router";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as IndexRouteImport } from "./routes/index";

const ServicesLazyRouteImport = createFileRoute("/services")();
const ContactUsLazyRouteImport = createFileRoute("/contact-us")();
const AboutUsLazyRouteImport = createFileRoute("/about-us")();

const ServicesLazyRoute = ServicesLazyRouteImport.update({
  id: "/services",
  path: "/services",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/services.lazy").then((d) => d.Route));
const ContactUsLazyRoute = ContactUsLazyRouteImport.update({
  id: "/contact-us",
  path: "/contact-us",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/contact-us.lazy").then((d) => d.Route));
const AboutUsLazyRoute = AboutUsLazyRouteImport.update({
  id: "/about-us",
  path: "/about-us",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/about-us.lazy").then((d) => d.Route));
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/about-us": typeof AboutUsLazyRoute;
  "/contact-us": typeof ContactUsLazyRoute;
  "/services": typeof ServicesLazyRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/about-us": typeof AboutUsLazyRoute;
  "/contact-us": typeof ContactUsLazyRoute;
  "/services": typeof ServicesLazyRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/about-us": typeof AboutUsLazyRoute;
  "/contact-us": typeof ContactUsLazyRoute;
  "/services": typeof ServicesLazyRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/about-us" | "/contact-us" | "/services";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/about-us" | "/contact-us" | "/services";
  id: "__root__" | "/" | "/about-us" | "/contact-us" | "/services";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutUsLazyRoute: typeof AboutUsLazyRoute;
  ContactUsLazyRoute: typeof ContactUsLazyRoute;
  ServicesLazyRoute: typeof ServicesLazyRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/services": {
      id: "/services";
      path: "/services";
      fullPath: "/services";
      preLoaderRoute: typeof ServicesLazyRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/contact-us": {
      id: "/contact-us";
      path: "/contact-us";
      fullPath: "/contact-us";
      preLoaderRoute: typeof ContactUsLazyRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/about-us": {
      id: "/about-us";
      path: "/about-us";
      fullPath: "/about-us";
      preLoaderRoute: typeof AboutUsLazyRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutUsLazyRoute: AboutUsLazyRoute,
  ContactUsLazyRoute: ContactUsLazyRoute,
  ServicesLazyRoute: ServicesLazyRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
